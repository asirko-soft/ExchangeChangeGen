using Microsoft.Exchange.WebServices.Data;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace ExchangeChangeGenerator
{
    class ExchangeGenerator
    {
        public string serverIP;
        string[] credentials;
        int amountToGenerate, generateTime, messageSize;    
        public ExchangeGenerator(string serverIP, string[] credentials, int amountToGenerate, int generateTime, int messageSize)
        {
            this.serverIP = serverIP;
            this.credentials = credentials;
            this.amountToGenerate = amountToGenerate;
            this.generateTime = generateTime;
            this.messageSize = messageSize;
        }

        private void sendMessages(ExchangeService service)
        {
            int messagesToSent = amountToGenerate / messageSize;

            Logger.Log("Start message generation.", LogLevel.Info, serverIP);
            Logger.Log(messagesToSent.ToString() + " messages will be sent.", LogLevel.Info, serverIP);

            for (int i = 0; i < messagesToSent; i++)
            {
                createRandomFile(this.messageSize);
                EmailMessage email = new EmailMessage(service);

                email.ToRecipients.Add(this.credentials[0]);
                email.Subject = "Exchange Change Generator";
                email.Body = new MessageBody("This is email generated by Exchange Change Generator");
                email.Attachments.AddFileAttachment(serverIP.ToString()+"\\attachment.dat");
                email.Send();
                Logger.Log("Sending E-mail Message #" + (i + 1).ToString(), LogLevel.Info, serverIP);
            }
        }

        private void deleteMessages(ExchangeService service)
        {
            Logger.Log("Cleanup Inbox Folders.", LogLevel.Info, serverIP);

            FindItemsResults<Item> results = null;
            results = service.FindItems(WellKnownFolderName.Inbox, new ItemView(100000));

            Logger.Log(results.TotalCount + " messages will be deleted.", LogLevel.Info, serverIP);

            for (int i = 0; i < results.TotalCount; i++)
            {
                results.Items[i].Delete(DeleteMode.HardDelete);
            }
        }
        public void startGenerator()
        {
            try
            {
                ExchangeService service = new ExchangeService(ExchangeVersion.Exchange2010);
                service.Credentials = new WebCredentials(this.credentials[0], this.credentials[1]);
                service.Url = new Uri("https://" + this.serverIP + "/EWS/Exchange.asmx");
                try
                {
                    service.FindFolders(WellKnownFolderName.Inbox, new FolderView(1));
                }
                catch (Exception e)
                {
                    Console.WriteLine("Sorry, the server {0} is unreachable, please see logs", serverIP);
                    Logger.Log("Sorry, the server is unreachable with error: " + e.Message + ". Stack Trace: " + e.StackTrace, LogLevel.Error, serverIP);
                    return;
                }
                Console.WriteLine("Connection to server {0} successfully established", this.serverIP);
                Logger.Log("Connection to server successfully established", LogLevel.Info, serverIP);

                while (true)
                {
                    DateTime startTime = DateTime.Now;
                    DateTime nextCycleTime = startTime.AddMinutes(this.generateTime);

                    deleteMessages(service);
                    sendMessages(service);

                    TimeSpan sleepTime = nextCycleTime - DateTime.Now;
                    if (sleepTime.TotalMilliseconds >= 0)
                    {
                        Logger.Log("Waiting " + sleepTime.Minutes.ToString() + " minutes to start next cycle.", LogLevel.Info, serverIP);
                        Thread.Sleep(sleepTime);
                    }
                    
                }
            }
            catch (Exception e)
            {
                Console.WriteLine("Something wrong with server {0}, please see logs", serverIP);
                Logger.Log("Something wrong with server " + e.Message + ". Stack Trace: " + e.StackTrace, LogLevel.Error, serverIP);            
                return;
            }
        }

        private void createRandomFile(int sizeInMb)
        {
            byte[] data = new byte[sizeInMb * 1024 * 1024];
            Random random = new Random();
            random.NextBytes(data);
            Directory.CreateDirectory(serverIP.ToString());
            File.WriteAllBytes(serverIP.ToString()+"\\attachment.dat", data);
        }
    }
}
