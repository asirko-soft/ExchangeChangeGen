using Microsoft.Exchange.WebServices.Data;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace EGen1
{
    class Program
    {
        static void Main(string[] args)
        {
            string[] credentials = new string[] {args[1],args[2]};

            // Connecting to Exchange Server
            ServicePointManager.ServerCertificateValidationCallback = CertificateValidationCallBack;
            ExchangeService service = new ExchangeService(ExchangeVersion.Exchange2010);
            service.Credentials = new WebCredentials(credentials[0], credentials[1]);
            string url = "https://" + args[0] + "/EWS/Exchange.asmx";
            service.Url = new Uri(url);
            Console.WriteLine("[{0}]: Connection to server {1} established", DateTime.Now.ToString(), args[0]);

        while(true)
            { 
            DateTime startTime = DateTime.Now;
            DateTime nextCycleTime = startTime.AddMinutes(60);

            Console.WriteLine("------------------------------------------------------");
            // Clean up Inbox folder
            Console.WriteLine("[{0}]: Cleanup Inbox Folder...",DateTime.Now.ToString());

            FindItemsResults<Item> results = null;

            try
            {
                results = service.FindItems(WellKnownFolderName.Inbox, new ItemView(100000));
            }
            catch (ServiceRequestException e)
            {
                Console.WriteLine("Sorry, the server is unreachable: {0}", e.Message);
                Console.ReadKey();
                return;
            }

            Console.WriteLine("[{0}]: {1} messages will be deleted", DateTime.Now.ToString(), results.TotalCount.ToString());

            for (int i = 0; i < results.TotalCount; i++)
            {
                results.Items[i].Delete(DeleteMode.HardDelete);
            }

            //Send new email
            Console.WriteLine("[{0}]: Start message generation", DateTime.Now.ToString());
            Console.WriteLine("[{0}]: {1} messages will be sent", DateTime.Now.ToString(), Convert.ToInt32(args[3])/5);

            //Creating random attachment with size of 5 MB
            Program.createRandomFile(5);     
            for (int i = 0; i < Convert.ToInt32(args[3])/ 5; i++)
            {
                EmailMessage email = new EmailMessage(service);

                email.ToRecipients.Add(credentials[0]);
                email.Subject = "Exchange Change Generator";
                email.Body = new MessageBody("This is email generated by Exchange Change Generator");
                email.Attachments.AddFileAttachment(@"attachment.dat");
                email.Send();
                Console.WriteLine("[{0}]: Sending E-mail Message #{1}...", DateTime.Now.ToString(), i + 1);
            }
            
            TimeSpan sleepTime = nextCycleTime - DateTime.Now;
            Console.WriteLine("[{0}]: Waiting {1} minutes to start next cycle...",DateTime.Now.ToString(), sleepTime.Minutes.ToString());
            Thread.Sleep(sleepTime);
           
        }
            
        }

        private static bool CertificateValidationCallBack(
        object sender,
        System.Security.Cryptography.X509Certificates.X509Certificate certificate,
        System.Security.Cryptography.X509Certificates.X509Chain chain,
        System.Net.Security.SslPolicyErrors sslPolicyErrors)
        {
            return true;
        }

        private static void createRandomFile(int sizeInMb)
        {
            byte[] data = new byte[sizeInMb * 1024 * 1024];
            Random random = new Random();
            random.NextBytes(data);
            File.WriteAllBytes(@"attachment.dat", data);
        }
    }
}
