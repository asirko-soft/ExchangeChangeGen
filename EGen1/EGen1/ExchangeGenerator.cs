using Microsoft.Exchange.WebServices.Data;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace ExchangeChangeGenerator
{
    class ExchangeGenerator
    {
        string serverIP;
        string[] credentials;
        int amountToGenerate, generateTime, messageSize;
        public ExchangeGenerator(string serverIP, string[] credentials, int amountToGenerate, int generateTime, int messageSize)
        {
            this.serverIP = serverIP;
            this.credentials = credentials;
            this.amountToGenerate = amountToGenerate;
            this.generateTime = generateTime;
            this.messageSize = messageSize;
        }

        private void sendMessages(ExchangeService service)
        {
            Console.WriteLine("[{0}]: Start message generation", DateTime.Now.ToString());
            Console.WriteLine("[{0}]: {1} messages will be sent", DateTime.Now.ToString(), this.amountToGenerate / this.messageSize);

            for (int i = 0; i < this.amountToGenerate / this.messageSize; i++)
            {
                createRandomFile(this.messageSize);
                EmailMessage email = new EmailMessage(service);

                email.ToRecipients.Add(this.credentials[0]);
                email.Subject = "Exchange Change Generator";
                email.Body = new MessageBody("This is email generated by Exchange Change Generator");
                email.Attachments.AddFileAttachment(@"attachment.dat");
                email.Send();
                Console.WriteLine("[{0}]: Sending E-mail Message #{1}...", DateTime.Now.ToString(), i + 1);
            }
        }

        private void deleteMessages(ExchangeService service)
        {
            Console.WriteLine("[{0}]: Cleanup Inbox Folders...", DateTime.Now.ToString());

            FindItemsResults<Item> results = null;

            try
            {
                results = service.FindItems(WellKnownFolderName.Inbox, new ItemView(100000));
            }
            catch (ServiceRequestException e)
            {
                Console.WriteLine("Sorry, the server is unreachable: {0}", e.Message);
                Console.ReadKey();
                return;
            }

            Console.WriteLine("[{0}]: {1} messages will be deleted", DateTime.Now.ToString(), results.TotalCount);

            for (int i = 0; i < results.TotalCount; i++)
            {
                results.Items[i].Delete(DeleteMode.HardDelete);
            }
        }
        public void startGenerator()
        {
            ExchangeService service = new ExchangeService();
            service.Credentials = new WebCredentials(this.credentials[0], this.credentials[1]);
            service.Url = new Uri("https://" + this.serverIP + "/EWS/Exchange.asmx");

            while (true)
            {
                DateTime startTime = DateTime.Now;
                DateTime nextCycleTime = startTime.AddMinutes(this.generateTime);

                Console.WriteLine("------------------------------------------------------");

                deleteMessages(service);
                sendMessages(service);

                TimeSpan sleepTime = nextCycleTime - DateTime.Now;
                Console.WriteLine("[{0}]: Waiting {1} minutes to start next cycle...", DateTime.Now.ToString(), sleepTime.Minutes.ToString());
                Thread.Sleep(sleepTime);
            }
        }

        private void createRandomFile(int sizeInMb)
        {
            byte[] data = new byte[sizeInMb * 1024 * 1024];
            Random random = new Random();
            random.NextBytes(data);
            File.WriteAllBytes(@"attachment.dat", data);
        }

    }
}
